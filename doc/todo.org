* ADL Core/Compiler
** Add support for ADL constants
** Compiler should find standard library without needing -I argument
** Throw compiler errors for types representing infinite values

Infinite values can be represented in haskell but not idiomatically in other languages. Hence
we should try and generate errors for them.

eg

module unittests
{
     struct Pair<A,B>
     {
         A first;
         B second;
     };

     struct X
     {
         X x;
     };

     union L1
     {
         Pair<Double,L1> value;
         Void null;
     };
};

values of type X will always be infinite. Values of type L1 may be constructed to
be finite, but the default value will be - this is also problematic.

** DONE Fix incorrect error generated for literal maps:

from  haskell/compiler/tests/test4/input/test.adl:

struct S2
{
        Map<String,Int32> f6 = [ { "v1" : "key1", "v2" : 7 },  { "v1" : "key2", "v2" : 32 } ];
};

gives:

    In module test :\nInvalid override of field f6 of S2: literals not allows for parameterised fields"


** DONE Throw compiler errors for type parameters applied to arguments

This should be illegal:

module test
{
type I<X> = X<Int32>;
};

ie all type parameters must have kind *.

** DONE Implement a backend to produce JSON
 - schema should be in DDL
** DONE Import syntax
    - Should we use java style?
** DONE Consider final list of primitive types
** DONE Decide on reserved words in ADL, and generate errors
** DONE Select custom types from command line
** DONE duplicate definitions
Currently definitions are stored in a map as they are parsed, so we don't detect duplicates

** DONE Work out the best way to put the defaults for custom types in the ADL

  A) Should typedefs allow defaults?

    typedef string UTCTime = "1900-01-01T00:00:00Z";

    - doesn't make sense to provide multiple defaults for the same type
    - can't use typeclasses to do defaulting in haskell backend

  B) Or should we just use single field structs, ie:

    struct UTCTime { string utcTime = "1900-01-01T00:00:00Z"; }

    - serialisation inefficiency
    - current implementation throws all values when you defined a custom type

  C) Or should we add a newtype definition:

    newtype string UTCTime = "1900-01-01T00:00:00Z";

    - another toplevel definition to be mapped into each target language


Perhaps:

instance ADLValue UTCTime where
  atype _ = atype (defaultv :: ADL.UTCTime)
  defaultv = utcTimeFromADL (defaultv :: ADL.UTCTime)
  aToJSON jf ut = aToJSON jf (adlFromUtcTime ut)
  aFromJSON jf jv = fmap utcTimeFromADL (aFromJSON jf jv)


** Protocol versioning
IDEA: use unions to specify version differences where the
discriminator is negotiated on connection, and not serialised
** Add support for documentation strings passing through to generated code

* Test Suite
** DONE Add ability to test compiler errors
* Haskell Backend
** Consider an option extra method on transport to support RPCs

data Connection = Connection {
  c_send :: LBS.ByteString -> IO (Either SendError ()),
  c_bisend :: Maybe (LBS.ByteString -> IO (Either SendError LBS.ByteString),
  c_close :: IO ()
  }

** standard custom types (ie Maybe) should be implemented in terms  ADL defined types
This would remove the need for the custom serialiser in ADL.Core.CustomTypes

** Formalise error handling in comms
(use a single standard exception type)
** Fix scoping in generated haskell code

** Empty unions result in a "Prelude.head: empty list" failure

** aFromJSON should provide error messages and context, ie something
  like:

      data AFJError = AFJError { afje_context :: [T.Text], afje_error ::  T.Text }
      aFromJSON :: JSONFlags -> JSON.Value -> Either AFJError a

** Serialisers are lazy values that grow
... to size proportional to the size of the largest value. It would be
nice to fix this so that serialisers have constant size
** DONE Void branches on unions don't need to take a () parameter


* C++ Backend
** Implement newtypes in terms of templates

** Serialisers are lazy values that grow
... to size proportional to the size of the largest value. It would be
nice to fix this so that serialisers have constant size
** DONE Work out how to generate code for mutually recursive types
** DONE Bug fixes
    - Missing throw in StreamJsonReader::next()
    - Number parser can't handle end of of string 123<EOS>
    - snext logic issue: EOF won't be reached until you try to read
      off the end (was reading 5 to 55)
** Complete implementation of transport

*** cpp-netlib ??

Build in ~/repos-3rd-party/cppnetlib from clone of master repo, at at cpp-netlib-0.11.0-final

Test program (a copy of their simple_wget) only works with c++ 11, ie

/usr/bin/clang++ -std=c++11 test.cpp  -o test  -lboost_program_options-mt -lboost_thread-mt -lboost_date_time-mt -lboost_regex-mt -lboost_system-mt -lboost_filesystem-mt -lboost_chrono-mt -lcppnetlib-uri -lcppnetlib-client-connections -lssl -lcrypto

cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
cmake -j4
cmake test     # 1 unit test fails
cmake install 


