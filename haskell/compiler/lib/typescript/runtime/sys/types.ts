/* Automatically generated by adlc */


interface Either_Left<T1, T2> {
  kind: 'left';
  value: T1;
}
interface Either_Right<T1, T2> {
  kind: 'right';
  value: T2;
}

export function makeEither_Left<T1, T2>(
  input: {
    kind: 'left',
    value: T1,
  }
): Either_Left<T1, T2> {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeEither_Right<T1, T2>(
  input: {
    kind: 'right',
    value: T2,
  }
): Either_Right<T1, T2> {
  return {
    kind: input.kind,
    value: input.value,
  };
}

export type Either<T1, T2> = Either_Left<T1, T2> | Either_Right<T1, T2>;

interface Error_Error<T> {
  kind: 'error';
  value: string;
}
interface Error_Value<T> {
  kind: 'value';
  value: T;
}

export function makeError_Error<T>(
  input: {
    kind: 'error',
    value: string,
  }
): Error_Error<T> {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeError_Value<T>(
  input: {
    kind: 'value',
    value: T,
  }
): Error_Value<T> {
  return {
    kind: input.kind,
    value: input.value,
  };
}

export type Error<T> = Error_Error<T> | Error_Value<T>;

export type Map<K, V> = Pair<K, V>[];

interface Maybe_Just<T> {
  kind: 'just';
  value: T;
}
interface Maybe_Nothing<T> {
  kind: 'nothing';
}

export function makeMaybe_Just<T>(
  input: {
    kind: 'just',
    value: T,
  }
): Maybe_Just<T> {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeMaybe_Nothing<T>(
  input: {
    kind: 'nothing',
  }
): Maybe_Nothing<T> {
  return {
    kind: input.kind,
  };
}

export type Maybe<T> = Maybe_Just<T> | Maybe_Nothing<T>;

interface Nullable_Just<T> {
  kind: 'just';
  value: T;
}
interface Nullable_Nothing<T> {
  kind: 'nothing';
}

export function makeNullable_Just<T>(
  input: {
    kind: 'just',
    value: T,
  }
): Nullable_Just<T> {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeNullable_Nothing<T>(
  input: {
    kind: 'nothing',
  }
): Nullable_Nothing<T> {
  return {
    kind: input.kind,
  };
}

/**
 * Nullable<T> is isomorphic to Maybe<T> but with an alternative
 * json serialisation, where the null_ branch is represented by a
 * json null Value.
 */
export type Nullable<T> = Nullable_Just<T> | Nullable_Nothing<T>;

export interface Pair<T1, T2> {
  v1: T1;
  v2: T2;
}

export function makePair<T1, T2>(
  input: {
    v1: T1,
    v2: T2,
  }
): Pair<T1, T2> {
  return {
    v1: input.v1,
    v2: input.v2,
  };
}

export type Set<T> = T[];
