/* Automatically generated by adlc */

import * as ADL from './../runtime/adl';
import * as sys_types from './types';

export type Annotations = sys_types.Map<ScopedName, Literal>;

const Annotations_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"type_","value":{"typeParams":[],"typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.types","name":"Map"}},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"ScopedName"}},"parameters":[]},{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Literal"}},"parameters":[]}]}}},"name":"Annotations","version":{"kind":"nothing"}}};

export function texprAnnotations(): ADL.ATypeExpr<Annotations> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Annotations"}}, parameters : []}};
}

export interface Decl {
  annotations: Annotations;
  name: Ident;
  type_: DeclType;
  version: sys_types.Maybe<number>;
}

export function makeDecl(
  input: {
    annotations: Annotations,
    name: Ident,
    type_: DeclType,
    version: sys_types.Maybe<number>,
  }
): Decl {
  return {
    annotations: input.annotations,
    name: input.name,
    type_: input.type_,
    version: input.version,
  };
}

const Decl_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"name","default":{"kind":"nothing"},"name":"name","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}},{"annotations":[],"serializedName":"version","default":{"kind":"nothing"},"name":"version","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.types","name":"Maybe"}},"parameters":[{"typeRef":{"kind":"primitive","value":"Word32"},"parameters":[]}]}},{"annotations":[],"serializedName":"type_","default":{"kind":"nothing"},"name":"type_","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"DeclType"}},"parameters":[]}},{"annotations":[],"serializedName":"annotations","default":{"kind":"nothing"},"name":"annotations","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Annotations"}},"parameters":[]}}]}},"name":"Decl","version":{"kind":"nothing"}}};

export function texprDecl(): ADL.ATypeExpr<Decl> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Decl"}}, parameters : []}};
}

interface DeclType_Newtype_ {
  kind: 'newtype_';
  value: NewType;
}
interface DeclType_Struct_ {
  kind: 'struct_';
  value: Struct;
}
interface DeclType_Type_ {
  kind: 'type_';
  value: TypeDef;
}
interface DeclType_Union_ {
  kind: 'union_';
  value: Union;
}

export function makeDeclType_Newtype_(
  input: {
    kind: 'newtype_',
    value: NewType,
  }
): DeclType_Newtype_ {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeDeclType_Struct_(
  input: {
    kind: 'struct_',
    value: Struct,
  }
): DeclType_Struct_ {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeDeclType_Type_(
  input: {
    kind: 'type_',
    value: TypeDef,
  }
): DeclType_Type_ {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeDeclType_Union_(
  input: {
    kind: 'union_',
    value: Union,
  }
): DeclType_Union_ {
  return {
    kind: input.kind,
    value: input.value,
  };
}

export type DeclType = DeclType_Newtype_ | DeclType_Struct_ | DeclType_Type_ | DeclType_Union_;

const DeclType_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"union_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"struct_","default":{"kind":"nothing"},"name":"struct_","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Struct"}},"parameters":[]}},{"annotations":[],"serializedName":"union_","default":{"kind":"nothing"},"name":"union_","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Union"}},"parameters":[]}},{"annotations":[],"serializedName":"type_","default":{"kind":"nothing"},"name":"type_","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"TypeDef"}},"parameters":[]}},{"annotations":[],"serializedName":"newtype_","default":{"kind":"nothing"},"name":"newtype_","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"NewType"}},"parameters":[]}}]}},"name":"DeclType","version":{"kind":"nothing"}}};

export function texprDeclType(): ADL.ATypeExpr<DeclType> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "DeclType"}}, parameters : []}};
}

export type DeclVersions = Decl[];

const DeclVersions_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"type_","value":{"typeParams":[],"typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Decl"}},"parameters":[]}]}}},"name":"DeclVersions","version":{"kind":"nothing"}}};

export function texprDeclVersions(): ADL.ATypeExpr<DeclVersions> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "DeclVersions"}}, parameters : []}};
}

export interface Field {
  annotations: Annotations;
  default: sys_types.Maybe<Literal>;
  name: Ident;
  serializedName: Ident;
  typeExpr: TypeExpr;
}

export function makeField(
  input: {
    annotations: Annotations,
    default: sys_types.Maybe<Literal>,
    name: Ident,
    serializedName: Ident,
    typeExpr: TypeExpr,
  }
): Field {
  return {
    annotations: input.annotations,
    default: input.default,
    name: input.name,
    serializedName: input.serializedName,
    typeExpr: input.typeExpr,
  };
}

const Field_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"name","default":{"kind":"nothing"},"name":"name","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}},{"annotations":[],"serializedName":"serializedName","default":{"kind":"nothing"},"name":"serializedName","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}},{"annotations":[],"serializedName":"typeExpr","default":{"kind":"nothing"},"name":"typeExpr","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"TypeExpr"}},"parameters":[]}},{"annotations":[],"serializedName":"default","default":{"kind":"nothing"},"name":"default","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.types","name":"Maybe"}},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Literal"}},"parameters":[]}]}},{"annotations":[],"serializedName":"annotations","default":{"kind":"nothing"},"name":"annotations","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Annotations"}},"parameters":[]}}]}},"name":"Field","version":{"kind":"nothing"}}};

export function texprField(): ADL.ATypeExpr<Field> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Field"}}, parameters : []}};
}

export type Ident = string;

const Ident_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"type_","value":{"typeParams":[],"typeExpr":{"typeRef":{"kind":"primitive","value":"String"},"parameters":[]}}},"name":"Ident","version":{"kind":"nothing"}}};

export function texprIdent(): ADL.ATypeExpr<Ident> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Ident"}}, parameters : []}};
}

interface Import_ModuleName {
  kind: 'moduleName';
  value: ModuleName;
}
interface Import_ScopedName {
  kind: 'scopedName';
  value: ScopedName;
}

export function makeImport_ModuleName(
  input: {
    kind: 'moduleName',
    value: ModuleName,
  }
): Import_ModuleName {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeImport_ScopedName(
  input: {
    kind: 'scopedName',
    value: ScopedName,
  }
): Import_ScopedName {
  return {
    kind: input.kind,
    value: input.value,
  };
}

export type Import = Import_ModuleName | Import_ScopedName;

const Import_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"union_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"moduleName","default":{"kind":"nothing"},"name":"moduleName","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"ModuleName"}},"parameters":[]}},{"annotations":[],"serializedName":"scopedName","default":{"kind":"nothing"},"name":"scopedName","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"ScopedName"}},"parameters":[]}}]}},"name":"Import","version":{"kind":"nothing"}}};

export function texprImport(): ADL.ATypeExpr<Import> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Import"}}, parameters : []}};
}

interface Literal_Array {
  kind: 'array';
  value: Literal[];
}
interface Literal_Boolean {
  kind: 'boolean';
  value: boolean;
}
interface Literal_Double {
  kind: 'double';
  value: number;
}
interface Literal_Integer {
  kind: 'integer';
  value: number;
}
interface Literal_Null {
  kind: 'null';
}
interface Literal_Object {
  kind: 'object';
  value: sys_types.Map<string, Literal>;
}
interface Literal_String {
  kind: 'string';
  value: string;
}

export function makeLiteral_Array(
  input: {
    kind: 'array',
    value: Literal[],
  }
): Literal_Array {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeLiteral_Boolean(
  input: {
    kind: 'boolean',
    value: boolean,
  }
): Literal_Boolean {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeLiteral_Double(
  input: {
    kind: 'double',
    value: number,
  }
): Literal_Double {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeLiteral_Integer(
  input: {
    kind: 'integer',
    value: number,
  }
): Literal_Integer {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeLiteral_Null(
  input: {
    kind: 'null',
  }
): Literal_Null {
  return {
    kind: input.kind,
  };
}
export function makeLiteral_Object(
  input: {
    kind: 'object',
    value: sys_types.Map<string, Literal>,
  }
): Literal_Object {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeLiteral_String(
  input: {
    kind: 'string',
    value: string,
  }
): Literal_String {
  return {
    kind: input.kind,
    value: input.value,
  };
}

export type Literal = Literal_Array | Literal_Boolean | Literal_Double | Literal_Integer | Literal_Null | Literal_Object | Literal_String;

const Literal_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"union_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"null","default":{"kind":"nothing"},"name":"null","typeExpr":{"typeRef":{"kind":"primitive","value":"Void"},"parameters":[]}},{"annotations":[],"serializedName":"integer","default":{"kind":"nothing"},"name":"integer","typeExpr":{"typeRef":{"kind":"primitive","value":"Int64"},"parameters":[]}},{"annotations":[],"serializedName":"double","default":{"kind":"nothing"},"name":"double","typeExpr":{"typeRef":{"kind":"primitive","value":"Double"},"parameters":[]}},{"annotations":[],"serializedName":"string","default":{"kind":"nothing"},"name":"string","typeExpr":{"typeRef":{"kind":"primitive","value":"String"},"parameters":[]}},{"annotations":[],"serializedName":"boolean","default":{"kind":"nothing"},"name":"boolean","typeExpr":{"typeRef":{"kind":"primitive","value":"Bool"},"parameters":[]}},{"annotations":[],"serializedName":"array","default":{"kind":"nothing"},"name":"array","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Literal"}},"parameters":[]}]}},{"annotations":[],"serializedName":"object","default":{"kind":"nothing"},"name":"object","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.types","name":"Map"}},"parameters":[{"typeRef":{"kind":"primitive","value":"String"},"parameters":[]},{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Literal"}},"parameters":[]}]}}]}},"name":"Literal","version":{"kind":"nothing"}}};

export function texprLiteral(): ADL.ATypeExpr<Literal> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Literal"}}, parameters : []}};
}

export interface Module {
  decls: sys_types.Map<Ident, Decl>;
  imports: Import[];
  name: ModuleName;
}

export function makeModule(
  input: {
    decls: sys_types.Map<Ident, Decl>,
    imports: Import[],
    name: ModuleName,
  }
): Module {
  return {
    decls: input.decls,
    imports: input.imports,
    name: input.name,
  };
}

const Module_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"name","default":{"kind":"nothing"},"name":"name","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"ModuleName"}},"parameters":[]}},{"annotations":[],"serializedName":"imports","default":{"kind":"nothing"},"name":"imports","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Import"}},"parameters":[]}]}},{"annotations":[],"serializedName":"decls","default":{"kind":"nothing"},"name":"decls","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.types","name":"Map"}},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]},{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Decl"}},"parameters":[]}]}}]}},"name":"Module","version":{"kind":"nothing"}}};

export function texprModule(): ADL.ATypeExpr<Module> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Module"}}, parameters : []}};
}

export type ModuleName = string;

const ModuleName_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"type_","value":{"typeParams":[],"typeExpr":{"typeRef":{"kind":"primitive","value":"String"},"parameters":[]}}},"name":"ModuleName","version":{"kind":"nothing"}}};

export function texprModuleName(): ADL.ATypeExpr<ModuleName> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "ModuleName"}}, parameters : []}};
}

export interface NewType {
  default: sys_types.Maybe<Literal>;
  typeExpr: TypeExpr;
  typeParams: Ident[];
}

export function makeNewType(
  input: {
    default: sys_types.Maybe<Literal>,
    typeExpr: TypeExpr,
    typeParams: Ident[],
  }
): NewType {
  return {
    default: input.default,
    typeExpr: input.typeExpr,
    typeParams: input.typeParams,
  };
}

const NewType_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"typeParams","default":{"kind":"nothing"},"name":"typeParams","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}]}},{"annotations":[],"serializedName":"typeExpr","default":{"kind":"nothing"},"name":"typeExpr","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"TypeExpr"}},"parameters":[]}},{"annotations":[],"serializedName":"default","default":{"kind":"nothing"},"name":"default","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.types","name":"Maybe"}},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Literal"}},"parameters":[]}]}}]}},"name":"NewType","version":{"kind":"nothing"}}};

export function texprNewType(): ADL.ATypeExpr<NewType> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "NewType"}}, parameters : []}};
}

export interface ScopedDecl {
  decl: Decl;
  moduleName: ModuleName;
}

export function makeScopedDecl(
  input: {
    decl: Decl,
    moduleName: ModuleName,
  }
): ScopedDecl {
  return {
    decl: input.decl,
    moduleName: input.moduleName,
  };
}

const ScopedDecl_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"moduleName","default":{"kind":"nothing"},"name":"moduleName","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"ModuleName"}},"parameters":[]}},{"annotations":[],"serializedName":"decl","default":{"kind":"nothing"},"name":"decl","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Decl"}},"parameters":[]}}]}},"name":"ScopedDecl","version":{"kind":"nothing"}}};

export function texprScopedDecl(): ADL.ATypeExpr<ScopedDecl> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "ScopedDecl"}}, parameters : []}};
}

export interface ScopedName {
  moduleName: ModuleName;
  name: Ident;
}

export function makeScopedName(
  input: {
    moduleName: ModuleName,
    name: Ident,
  }
): ScopedName {
  return {
    moduleName: input.moduleName,
    name: input.name,
  };
}

const ScopedName_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"moduleName","default":{"kind":"nothing"},"name":"moduleName","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"ModuleName"}},"parameters":[]}},{"annotations":[],"serializedName":"name","default":{"kind":"nothing"},"name":"name","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}}]}},"name":"ScopedName","version":{"kind":"nothing"}}};

export function texprScopedName(): ADL.ATypeExpr<ScopedName> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "ScopedName"}}, parameters : []}};
}

export interface Struct {
  fields: Field[];
  typeParams: Ident[];
}

export function makeStruct(
  input: {
    fields: Field[],
    typeParams: Ident[],
  }
): Struct {
  return {
    fields: input.fields,
    typeParams: input.typeParams,
  };
}

const Struct_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"typeParams","default":{"kind":"nothing"},"name":"typeParams","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}]}},{"annotations":[],"serializedName":"fields","default":{"kind":"nothing"},"name":"fields","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Field"}},"parameters":[]}]}}]}},"name":"Struct","version":{"kind":"nothing"}}};

export function texprStruct(): ADL.ATypeExpr<Struct> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Struct"}}, parameters : []}};
}

export interface TypeDef {
  typeExpr: TypeExpr;
  typeParams: Ident[];
}

export function makeTypeDef(
  input: {
    typeExpr: TypeExpr,
    typeParams: Ident[],
  }
): TypeDef {
  return {
    typeExpr: input.typeExpr,
    typeParams: input.typeParams,
  };
}

const TypeDef_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"typeParams","default":{"kind":"nothing"},"name":"typeParams","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}]}},{"annotations":[],"serializedName":"typeExpr","default":{"kind":"nothing"},"name":"typeExpr","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"TypeExpr"}},"parameters":[]}}]}},"name":"TypeDef","version":{"kind":"nothing"}}};

export function texprTypeDef(): ADL.ATypeExpr<TypeDef> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "TypeDef"}}, parameters : []}};
}

export interface TypeExpr {
  parameters: TypeExpr[];
  typeRef: TypeRef;
}

export function makeTypeExpr(
  input: {
    parameters: TypeExpr[],
    typeRef: TypeRef,
  }
): TypeExpr {
  return {
    parameters: input.parameters,
    typeRef: input.typeRef,
  };
}

const TypeExpr_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"typeRef","default":{"kind":"nothing"},"name":"typeRef","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"TypeRef"}},"parameters":[]}},{"annotations":[],"serializedName":"parameters","default":{"kind":"nothing"},"name":"parameters","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"TypeExpr"}},"parameters":[]}]}}]}},"name":"TypeExpr","version":{"kind":"nothing"}}};

export function texprTypeExpr(): ADL.ATypeExpr<TypeExpr> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "TypeExpr"}}, parameters : []}};
}

interface TypeRef_Primitive {
  kind: 'primitive';
  value: Ident;
}
interface TypeRef_Reference {
  kind: 'reference';
  value: ScopedName;
}
interface TypeRef_TypeParam {
  kind: 'typeParam';
  value: Ident;
}

export function makeTypeRef_Primitive(
  input: {
    kind: 'primitive',
    value: Ident,
  }
): TypeRef_Primitive {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeTypeRef_Reference(
  input: {
    kind: 'reference',
    value: ScopedName,
  }
): TypeRef_Reference {
  return {
    kind: input.kind,
    value: input.value,
  };
}
export function makeTypeRef_TypeParam(
  input: {
    kind: 'typeParam',
    value: Ident,
  }
): TypeRef_TypeParam {
  return {
    kind: input.kind,
    value: input.value,
  };
}

export type TypeRef = TypeRef_Primitive | TypeRef_Reference | TypeRef_TypeParam;

const TypeRef_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"union_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"primitive","default":{"kind":"nothing"},"name":"primitive","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}},{"annotations":[],"serializedName":"typeParam","default":{"kind":"nothing"},"name":"typeParam","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}},{"annotations":[],"serializedName":"reference","default":{"kind":"nothing"},"name":"reference","typeExpr":{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"ScopedName"}},"parameters":[]}}]}},"name":"TypeRef","version":{"kind":"nothing"}}};

export function texprTypeRef(): ADL.ATypeExpr<TypeRef> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "TypeRef"}}, parameters : []}};
}

export interface Union {
  fields: Field[];
  typeParams: Ident[];
}

export function makeUnion(
  input: {
    fields: Field[],
    typeParams: Ident[],
  }
): Union {
  return {
    fields: input.fields,
    typeParams: input.typeParams,
  };
}

const Union_AST : ADL.ScopedDecl =
  {"moduleName":"sys.adlast","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"typeParams","default":{"kind":"nothing"},"name":"typeParams","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Ident"}},"parameters":[]}]}},{"annotations":[],"serializedName":"fields","default":{"kind":"nothing"},"name":"fields","typeExpr":{"typeRef":{"kind":"primitive","value":"Vector"},"parameters":[{"typeRef":{"kind":"reference","value":{"moduleName":"sys.adlast","name":"Field"}},"parameters":[]}]}}]}},"name":"Union","version":{"kind":"nothing"}}};

export function texprUnion(): ADL.ATypeExpr<Union> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "sys.adlast",name : "Union"}}, parameters : []}};
}

export const _AST_MAP = {
  "sys.adlast.Annotations" : Annotations_AST,
  "sys.adlast.Decl" : Decl_AST,
  "sys.adlast.DeclType" : DeclType_AST,
  "sys.adlast.DeclVersions" : DeclVersions_AST,
  "sys.adlast.Field" : Field_AST,
  "sys.adlast.Ident" : Ident_AST,
  "sys.adlast.Import" : Import_AST,
  "sys.adlast.Literal" : Literal_AST,
  "sys.adlast.Module" : Module_AST,
  "sys.adlast.ModuleName" : ModuleName_AST,
  "sys.adlast.NewType" : NewType_AST,
  "sys.adlast.ScopedDecl" : ScopedDecl_AST,
  "sys.adlast.ScopedName" : ScopedName_AST,
  "sys.adlast.Struct" : Struct_AST,
  "sys.adlast.TypeDef" : TypeDef_AST,
  "sys.adlast.TypeExpr" : TypeExpr_AST,
  "sys.adlast.TypeRef" : TypeRef_AST,
  "sys.adlast.Union" : Union_AST
};
