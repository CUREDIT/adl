/* Automatically generated by adlc */

import * as ADL from './runtime/adl';

export interface Bar {
  name: string;
}

export function makeBar(
  input: {
    name: string,
  }
): Bar {
  return {
    name: input.name,
  };
}

const Bar_AST : ADL.ScopedDecl =
  {"moduleName":"test","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"name","default":{"kind":"nothing"},"name":"name","typeExpr":{"typeRef":{"kind":"primitive","value":"String"},"parameters":[]}}]}},"name":"Bar","version":{"kind":"nothing"}}};

export function texprBar(): ADL.ATypeExpr<Bar> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "test",name : "Bar"}}, parameters : []}};
}

export interface Baz {
  field1: number;
  field2: number;
  name: string;
}

export function makeBaz(
  input: {
    field1: number,
    field2: number,
    name: string,
  }
): Baz {
  return {
    field1: input.field1,
    field2: input.field2,
    name: input.name,
  };
}

const Baz_AST : ADL.ScopedDecl =
  {"moduleName":"test","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"field1","default":{"kind":"nothing"},"name":"field1","typeExpr":{"typeRef":{"kind":"primitive","value":"Double"},"parameters":[]}},{"annotations":[],"serializedName":"field2","default":{"kind":"nothing"},"name":"field2","typeExpr":{"typeRef":{"kind":"primitive","value":"Double"},"parameters":[]}},{"annotations":[],"serializedName":"name","default":{"kind":"nothing"},"name":"name","typeExpr":{"typeRef":{"kind":"primitive","value":"String"},"parameters":[]}}]}},"name":"Baz","version":{"kind":"nothing"}}};

export function texprBaz(): ADL.ATypeExpr<Baz> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "test",name : "Baz"}}, parameters : []}};
}

export interface Foo {
  field1: number;
  field2: number;
}

export function makeFoo(
  input: {
    field1: number,
    field2: number,
  }
): Foo {
  return {
    field1: input.field1,
    field2: input.field2,
  };
}

const Foo_AST : ADL.ScopedDecl =
  {"moduleName":"test","decl":{"annotations":[],"type_":{"kind":"struct_","value":{"typeParams":[],"fields":[{"annotations":[],"serializedName":"field1","default":{"kind":"nothing"},"name":"field1","typeExpr":{"typeRef":{"kind":"primitive","value":"Double"},"parameters":[]}},{"annotations":[],"serializedName":"field2","default":{"kind":"nothing"},"name":"field2","typeExpr":{"typeRef":{"kind":"primitive","value":"Double"},"parameters":[]}}]}},"name":"Foo","version":{"kind":"nothing"}}};

export function texprFoo(): ADL.ATypeExpr<Foo> {
  return {value : {typeRef : {kind: "reference", value : {moduleName : "test",name : "Foo"}}, parameters : []}};
}

export const _AST_MAP = {
  "test.Bar" : Bar_AST,
  "test.Baz" : Baz_AST,
  "test.Foo" : Foo_AST
};
