{
    "customTypes" : [
        {
            "adlname" : "test.Date",
            "haskellname" : "Day",
            "haskellimports" : [
                "Data.Time.Calendar(Day)",
                "Data.Time.Format(parseTime,formatTime)",
                "Data.Text(pack,unpack)",
                "System.Locale(defaultTimeLocale)"
             ],
            "insertCode" : [
                "type Date = Day",
                "",
                "toDate :: DateO -> Prelude.Maybe Day",
                "toDate (DateO s) = parseTime defaultTimeLocale \"%F\" (Data.Text.unpack s)",
                "",
                "fromDate :: Day -> DateO",
                "fromDate d = DateO (Data.Text.pack (formatTime defaultTimeLocale \"%F\" d))",
                "",
                "instance ADLValue Day where",
                "  atype _ = atype (defaultv :: DateO)",
                "  defaultv = let (Prelude.Just d) = toDate defaultv in d",
                "  jsonSerialiser jf = JSONSerialiser aTo aFrom",
                "    where",
                "      js = jsonSerialiser jf",
                "      aTo d = aToJSON js (fromDate d)",
                "      aFrom jv = (Prelude.>>=) (aFromJSON js jv) toDate"
            ],
            "generateOrigADLType" : { "just" : "DateO" }
        }
    ]        
}
