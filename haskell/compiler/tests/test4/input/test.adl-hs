module test4
{

import adlc.config.haskell.HaskellCustomType;

annotation Date HaskellCustomType {
    "haskellname" : "Day",
    "haskellimports" : [
        "Data.Time.Calendar(Day)",
        "Data.Time.Format(parseTime,formatTime)",
        "System.Locale(defaultTimeLocale)"
     ],
    "insertCode" : [
        "type Date = Day",
        "",
        "fromDateO :: DateO -> Prelude.Maybe Day",
        "fromDateO (DateO s) = parseTime defaultTimeLocale \"%F\" s",
        "",
        "toDateO :: Day -> DateO",
        "toDateO d = DateO (formatTime defaultTimeLocale \"%F\" d)",
        "",
        "instance AdlValue Day where",
        "  atype _ = atype (Data.Proxy.Proxy :: Data.Proxy.Proxy DateO)",
        "  defaultv = let (Prelude.Just d) = toDate defaultv in d",
        "  jsonGen = JsonGen (adlToJson . toDateO)",
        "  jsonParser = jsonParser undefined"
    ],
    "generateOrigADLType" : "DateO"
};

};