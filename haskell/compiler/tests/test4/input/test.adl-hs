module test4
{

import adlc.config.haskell.HaskellCustomType;

annotation Date HaskellCustomType {
    "haskellname" : "Day",
    "haskellimports" : [
        "Prelude((.))",
        "Data.Time.Calendar(Day)",
        "Data.Time.Format(parseTimeM,formatTime,defaultTimeLocale)",
        "qualified Data.Aeson",
        "qualified Data.Maybe",
        "qualified Data.Text"
     ],
    "insertCode" : [
        "type Date = Day",
        "",
        "dateFromText :: Data.Text.Text -> Prelude.Maybe Day",
        "dateFromText s = parseTimeM Prelude.True defaultTimeLocale \"%F\" (T.unpack s)",
        "",
        "dateToText :: Day -> Data.Text.Text",
        "dateToText d = T.pack (formatTime defaultTimeLocale \"%F\" d)",
        "",
        "instance AdlValue Day where",
        "  atype _ = \"test4.Date\"",
        "  defaultv = let (Prelude.Just d) = dateFromText \"1900-01-01\" in d",
        "  jsonGen = JsonGen (adlToJson . dateToText)",
        "  jsonParser = JsonParser (\\jv -> case jv of ",
        "    Data.Aeson.String s -> dateFromText s",
        "    _ -> Prelude.Nothing",
        "    )"
    ],
    "structConstructor" : "(Data.Maybe.fromJust . dateFromText)"
};

};