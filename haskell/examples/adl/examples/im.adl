module examples.im
{
    import sys.types.*;
    import sys.rpc.*;

    // The AuthenticateActor is the initial connection point for clients.
    // It is a published well known address, that clients use to connect to
    // the service. Unsucessfull authentication will result in an error. 
    // Successful  authentication will reuturn a ServiceActor to the client,
    // which can be used for subsequent communications.

    type AuthenticateActor = RpcSvc<AuthenticateReq,Error<ServiceActor>>;

    // An AuthenticateReq requires the credentials of the user, and the
    // actor that will be notified (asynchronously) of events of interest
    // to that user.

    struct AuthenticateReq
    {
         String username;
         String password;
         ClientActor client;
    };

    // The ServiceActor allows clients to make service requests, to:
    //
    //      - change user settings and state
    //      - create new conversations
    //      - query the user db

    type  ServiceActor = Sink<ServiceReq>;

    union ServiceReq
    {
         // Set my nickname
         Rpc<Nickname,Error<Void>> setNickname;

         // Set my online presence
         Presence setPresence;

         // Create a new conversation
         Rpc<Void,ConversationRefActor> createConversation;

         // Query users
         Rpc<QueryUsersReq,QueryUsersResp> queryUsers;

         // Follow some users
         Vector<Nickname> follow;

         // Unfollow some users
         Vector<Nickname> unfollow;
    };

    // A Nickname is just an alias for a String

    type Nickname = String;

    // An "enum" representing presence status.

    union Presence
    {
         Void active;
         Void idle;
         Void absent;
    };

    struct QueryUsersReq
    {
        String queryString;
    };

    struct QueryUsersResp
    {
        Int32 nlMatches;
        Vector<Nickname> users;
    };

    struct SubscriptionReq
    {
        Nickname from;
        ConversationActor toConversation;
    };

    struct PresenceNotification
    {
        Nickname nickname;
        Presence presence;
    };

    union ClientMessage
    {
         SubscriptionReq subscriptionReq;
         PresenceNotification presence;
    };

    // Asynchronous events specific to a client are sent
    // to a ClientActor
    type ClientActor = Sink<ClientMessage>;

    union ConversationRReq
    {
         Rpc<ConversationClientActor,ConversationActor> subscribe;
         Nickname invite;
    };

    type ConversationRefActor = Sink<ConversationRReq>;

    struct Posting
    {
        DateTime datetime;
        Nickname nickname;
        String message;                 
    };

    union ConversationReq
    {
        String postMessage;
        Void unsubscribe;
    };

    type ConversationActor = Sink<ConversationReq>;

    union ConversationMessage
    {
        Posting posting;
        Nickname subscribed;
        Nickname unsubscribed;
    };

    type ConversationClientActor = Sink<ConversationMessage>; 

    // A DateTime is serialised as a String, but is a distinct type.
    // It is likely that in code generation a user will map it to
    // an appropriate native type using a custom type mapping.

    newtype DateTime = String = "2000-01-01T00:00Z";
};