{
    "customTypes" : [
        {
            "adlname" : "examples.datetime.Date",
            "haskellname" : "Day",
            "haskellimports" : [
                "Data.Time.Calendar(Day)",
                "Data.Time.Format(parseTime,formatTime)",
                "System.Locale(defaultTimeLocale)",
                "Prelude(Maybe(..),(>>=))",
                "qualified Data.Text as T"
                ],
            "insertCode" : [
                "type Date = Day",
                "",
                "toDay :: Date0 -> Maybe Day",
                "toDay (Date0 s) = parseTime defaultTimeLocale \"%FT%XZ\" (T.unpack s)",
                "",
                "fromDay :: Day -> Date0",
                "fromDay d = Date0 (T.pack (formatTime defaultTimeLocale \"%FT%XZ\" d))",
                "",
                "instance ADLValue Day where",
                "  atype _ = atype (Prelude.undefined :: Date0)",
                "  jsonSerialiser jf = JSONSerialiser to from",
                "     where",
                "       js = jsonSerialiser jf",
                "       to d = aToJSON js (fromDay d) ",
                "       from o = aFromJSON js o >>= toDay"
            ],
            "generateOrigADLType" : { "just" : "Date0" }
        },
        {
            "adlname" : "examples.datetime.UTCTime",
            "haskellname" : "UTCTime",
            "haskellimports" : [
                "Data.Time.Clock(UTCTime)",
                "Data.Time.Format(parseTime,formatTime)",
                "System.Locale(defaultTimeLocale)",
                "Prelude(Maybe(..),(>>=))",
                "qualified Data.Text as T"
            ],
            "insertCode" : [
                "toUTCTime :: UTCTime0 -> Maybe UTCTime",
                "toUTCTime (UTCTime0 s) = parseTime defaultTimeLocale \"%FT%XZ\" (T.unpack s)",
                "",
                "fromUTCTime :: UTCTime -> UTCTime0",
                "fromUTCTime d = UTCTime0 (T.pack (formatTime defaultTimeLocale \"%FT%XZ\" d))",
                "",
                "instance ADLValue UTCTime where",
                "  atype _ = atype (Prelude.undefined :: UTCTime0)",
                "  jsonSerialiser jf = JSONSerialiser to from",
                "     where",
                "       js = jsonSerialiser jf",
                "       to d = aToJSON js (fromUTCTime d) ",
                "       from o = aFromJSON js o >>= toUTCTime"
            ],
            "generateOrigADLType" : { "just" : "UTCTime0" }
        }
    ]        
}
