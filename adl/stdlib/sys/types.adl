module sys.types
{
// Some standard types

struct Pair<T1,T2>
{
    T1 v1;
    T2 v2;
};

union Either<T1,T2>
{
    T1 left;
    T2 right;
};

union Maybe<T>
{
    Void nothing;
    T just;
};

union Error<T>
{
    T value;
    String error;
};

newtype Map<K,V> = Vector<Pair<K,V>>;

newtype Set<T> = Vector<T>;

/// Nullable<T> is isomorphic to Maybe<T> but with an alternative
/// json serialisation, where the null_ branch is represented by a
/// json null Value.
union Nullable<T>
{
    Void nothing;
    T just;
};

annotation Nullable CustomSerialization true;

};
