* ADL Core/Compiler
** DONE Import syntax
    - Should we use java style?
** DONE Consider final list of primitive types
** DONE Decide on reserved words in ADL, and generate errors
** Add support for ADL constants 
** DONE Select custom types from command line
** Work out the best way to put the defaults for custom types in the ADL

  A) Should typedefs allow defaults?

    typedef string UTCTime = "1900-01-01T00:00:00Z";

    - doesn't make sense to provide multiple defaults for the same type
    - can't use typeclasses to do defaulting in haskell backend

  B) Or should we just use single field structs, ie:

    struct UTCTime { string utcTime = "1900-01-01T00:00:00Z"; }

    - serialisation inefficiency
    - current implementation throws all values when you defined a custom type

  C) Or should we add a newtype definition:

    newtype string UTCTime = "1900-01-01T00:00:00Z";

    - another toplevel definition to be mapped into each target language


Perhaps:

instance ADLValue UTCTime where
  atype _ = atype (defaultv :: ADL.UTCTime)
  defaultv = utcTimeFromADL (defaultv :: ADL.UTCTime)
  aToJSON jf ut = aToJSON jf (adlFromUtcTime ut)
  aFromJSON jf jv = fmap utcTimeFromADL (aFromJSON jf jv)


** Protocol versioning
IDEA: use unions to specify version differences where the
discriminator is negotiated on connection, and not serialised
** Add support for documentation strings passing through to generated code

* Test Suite
** Add ability to test compiler errors

* Haskell Backend
** Formalise error handling in comms
(use a single standard exception type)
** Fix scoping in generated haskell code

** Empty unions result in a "Prelude.head: empty list" failure

** aFromJSON should provide error messages and context, ie something
  like:

      data AFJError = AFJError { afje_context :: [T.Text], afje_error ::  T.Text }
      aFromJSON :: JSONFlags -> JSON.Value -> Either AFJError a




