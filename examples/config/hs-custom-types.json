{
    "customTypes" : [
        {
            "adlname" : "examples.datetime.Date",
            "haskellname" : "Day",
            "haskellimports" : [
                "Data.Time.Calendar(Day)",
                "Data.Time.Format(parseTime,formatTime)",
                "System.Locale(defaultTimeLocale)",
                "Prelude(Maybe(..),(>>=))",
                "qualified Data.Text as T"
                ],
            "insertCode" : [
                "type Date = Day",
                "",
                "toDay :: Date0 -> Maybe Day",
                "toDay (Date0 s) = parseTime defaultTimeLocale \"%FT%XZ\" (T.unpack s)",
                "",
                "fromDay :: Day -> Date0",
                "fromDay d = Date0 (T.pack (formatTime defaultTimeLocale \"%FT%XZ\" d))",
                "",
                "instance ADLValue Day where",
                "  atype _ = atype (defaultv :: Date0)",
                "  defaultv = let (Just d) = toDay defaultv in d",
                "  aToJSON jf d = aToJSON jf (fromDay d)",
                "  aFromJSON jf jv = (aFromJSON jf jv) >>= toDay"
            ],
            "generateOrigADLType" : { "just" : "Date0" }
        },
        {
            "adlname" : "examples.datetime.UTCTime",
            "haskellname" : "UTCTime",
            "haskellimports" : [
                "Data.Time.Clock(UTCTime)",
                "Data.Time.Format(parseTime,formatTime)",
                "System.Locale(defaultTimeLocale)",
                "Prelude(Maybe(..),(>>=))",
                "qualified Data.Text as T"
            ],
            "insertCode" : [
                "toUTCTime :: UTCTime0 -> Maybe UTCTime",
                "toUTCTime (UTCTime0 s) = parseTime defaultTimeLocale \"%FT%XZ\" (T.unpack s)",
                "",
                "fromUTCTime :: UTCTime -> UTCTime0",
                "fromUTCTime d = UTCTime0 (T.pack (formatTime defaultTimeLocale \"%FT%XZ\" d))",
                "",
                "instance ADLValue UTCTime where",
                "  atype _ = atype (defaultv :: UTCTime0)",
                "  defaultv = let (Just d) = toUTCTime defaultv in d",
                "  aToJSON jf d = aToJSON jf (fromUTCTime d)",
                "  aFromJSON jf jv = (aFromJSON jf jv) >>= toUTCTime"
            ],
            "generateOrigADLType" : { "just" : "UTCTime0" }
        }
    ]        
}