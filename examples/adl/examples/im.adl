module examples.im
{
    import sys.types;
    import sys.rpc;

    typedef String Nickname;

    struct AuthenticateReq
    {
         String username;
         String password;
         ClientActor client;
    };

    // The AuthenticateActor is the initial connection point for clients.
    // It is a published well known address, that clients use to connect to
    // the service.
    typedef rpcsvc<AuthenticateReq,Error<ServiceActor>> AuthenticateActor;

    union Presence
    {
         Void active;
         Void idle;
         Void absent;
    };

    struct QueryUsersReq
    {
        String queryString;
    };

    struct QueryUsersResp
    {
        int nlMatches;
        Vector<Nickname> users;
    };

    union ServiceReq
    {
         // Set my nickname
         Rpc<Nickname,Error<Void>> setNickname;

         // Set my online presence
         Presence setPresence;

         // Create a new conversation
         Rpc<Void,ConversationRefActor> createConversation;

         // Query users
         Rpc<QueryUsersReq,QueryUsersResp> queryUsers;

         // Follow some users
         Vector<Nickname> follow;

         // Unfollow some users
         Vector<Nickname> unfollow;
    };

    // The ServiceActor allows clients to create :
    //      - change user settings and state
    //      - create new conversations
    //      - query the user db
    typedef Sink<ServiceReq> ServiceActor;

    struct SubscriptionReq
    {
        Nickname from;
        ConversationActor toConversation;
    };

    struct PresenceNotification
    {
        Nickname nickname;
        Presence presences;
    };

    union ClientMessage
    {
         SubscriptionReq subscriptionReq;
         PresenceNotification presence;
    };

    // Asynchronous events specific to a client are sent
    // to a ClientActor
    typedef Sink<ClientMessage> ClientActor;

    union ConversationRReq
    {
         Rpc<ConversationClientActor,ConversationActor> subscribe;
         Nickname invite;
    };

    typedef Sink<ConversationRReq> ConversationRefActor;

    struct Posting
    {
        datetime datetime;
        Nickname nickname;
        String message;                 
    };

    union ConversationReq
    {
        String postMessage;
        Void unsubscribe;
    };

    typedef Sink<ConversationReq> ConversationActor;

    union ConversationMessage
    {
        Posting posting;
        Nickname subscribed;
        Nickname unsubscribed;
    };

    typedef Sink<ConversationMessage> ConversationClientActor; 
};