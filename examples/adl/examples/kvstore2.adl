module examples.kvstore2
{

import sys.types.*;
import sys.rpc.*;

type Key = String;
type Value = String;
type Pattern = String;
type KVPair = Pair<Key,Value>;
type QueryResults = Vector<KVPair>;

union KVRequest
{
    // put and delete don't return results,
    // but may generate an Error, due to permissions 
    // problems.
    Rpc<KVPair,Error<Void>> put;
    Rpc<Key,Error<Void>> delete;

    Rpc<Pattern,QueryResults> query;
};

type KVService = Sink<KVRequest>;

struct Credentials
{
    String username;
    String password;        
};

// For authentication, we provide the credentials, and on
// success get back a reference to the service, otherwise
// an error message.
type AuthenticateReq = Rpc<Credentials,Error<KVService>>;

type Authenticator = Sink<AuthenticateReq>;

struct User
{
    Credentials credentials;
    Bool has_write_access;
};

type UserDetails = Vector<User>;

};
