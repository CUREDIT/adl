module examples.pubsub
{

import sys.rpc.*;
import examples.datetime.UTCTime;

// A Channel<T,P> is a data type where we can published
// messages of type T, and can subscribe using a pattern
// of type P
typedef sink<ChannelReq<T,P>> Channel<T,P>;

struct Message<T> {
    UTCTime timestamp;
    T payload;
};

// The possible requests that we can send to a channel.
union ChannelReq<T,P>
{
    // Publish a message
    Message<T> publish;

    // Register a new subscrition
    rpc<Subscribe<T,P>,Subscription> subscribe;
};

struct Subscribe<T,P>
{
    // This pattern to be used
    P pattern;        

    // Messages with payloads that match the pattern
    // will be forwarded to this destination.
    sink<Message<T>> sendTo;
};

typedef sink<SubsReq> Subscription;

// Actions available to an existing subscription
union SubsReq
{
    // You can only unsubscribe        
    void unsubscribe;
};

};